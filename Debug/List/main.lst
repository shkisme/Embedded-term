###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       08/Dec/2023  19:05:05
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu1\Documents\Embedded-term\user\main.c
#    Command line =  
#        -f C:\Users\pnu1\AppData\Local\Temp\EWC0E1.tmp
#        (C:\Users\pnu1\Documents\Embedded-term\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu1\Documents\Embedded-term\Debug\List -o
#        C:\Users\pnu1\Documents\Embedded-term\Debug\Obj --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu1\Documents\Embedded-term\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu1\Documents\Embedded-term\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu1\Documents\Embedded-term\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu1\Documents\Embedded-term\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu1\Documents\Embedded-term\libraries\LCD\ -I
#        C:\Users\pnu1\Documents\Embedded-term\user\ -I
#        C:\Users\pnu1\Documents\Embedded-term\user\inc\ -Ol -I "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  C:\Users\pnu1\Documents\Embedded-term\Debug\List\main.lst
#    Object file  =  C:\Users\pnu1\Documents\Embedded-term\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu1\Documents\Embedded-term\user\main.c
      1          #include <stdbool.h>
      2          #include "stm32f10x.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void __NVIC_EnableIRQ(IRQn_Type)
   \                     __NVIC_EnableIRQ: (+1)
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD409             BMI.N    ??__NVIC_EnableIRQ_0
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \   0000000E   0x408A             LSLS     R2,R2,R1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable16_2  ;; 0xe000e100
   \   00000014   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000016   0x0940             LSRS     R0,R0,#+5
   \   00000018   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \                     ??__NVIC_EnableIRQ_0: (+1)
   \   0000001C   0x4770             BX       LR               ;; return
      3          #include "core_cm3.h"
      4          #include "misc.h"
      5          #include "stm32f10x_exti.h"
      6          #include "stm32f10x_gpio.h"
      7          #include "stm32f10x_usart.h"
      8          #include "stm32f10x_rcc.h"
      9          #include "stm32f10x_adc.h"
     10          #include "stm32f10x_tim.h"
     11          #include "lcd.h"
     12          #include "touch.h"
     13          
     14          /* function prototype */
     15          void RCC_Configure(void);
     16          void GPIO_Configure(void);
     17          void TIM_Configure(void);
     18          void Servo_posimove(int Init_duty, int Direction,int delay);
     19          void Servo_negamove(int Init_duty, int Direction, int delay);
     20          void delay_ms(uint32_t ms);
     21          void USART2_Init(void);
     22          void NVIC_Configure(void);
     23          void TIM2_IRQHandler(void);
     24          void USART2_IRQHandler(void);
     25          void ADC_Configure(void);
     26          void ADC1_2_IRQHandler(void);
     27          void TIM2_IRQHandler(void);
     28          void startVen(void);
     29          void startMotor(void);
     30          void stopMotor(void);
     31          void LED_On(void);
     32          void LED_Off(void);
     33          void resetTimer(void);
     34          
     35          /*-------------Timer Status---------------*/
     36          #define NO_TIMER 0
     37          #define TWENTY_SEC 10 // 20 sec

   \                                 In section .bss, align 4
     38          int timer_status = NO_TIMER;
   \                     timer_status:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     39          int current_time = 0;
   \                     current_time:
   \   00000000                      DS8 4
     40          

   \                                 In section .data, align 4
     41          int SMOKE_FLAG = 1000; // ?@@ ?@@@€ ?@?@€ ?@@?@@ @
   \                     SMOKE_FLAG:
   \   00000000   0x000003E8         DC32 1000

   \                                 In section .data, align 4
     42          int LIGHT_FLAG = 2900; // @@@ ?@@ ?@@
   \                     LIGHT_FLAG:
   \   00000000   0x00000B54         DC32 2900
     43          

   \                                 In section .bss, align 2
     44          uint16_t analogData_1, analogData_2;
   \                     analogData_1:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
   \                     analogData_2:
   \   00000000                      DS8 2

   \                                 In section .data, align 4
     45          int color[12] = {WHITE, CYAN, BLUE, RED, MAGENTA, LGRAY, GREEN, YELLOW, BROWN, BRRED, GRAY};
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     46          
     47          // flag

   \                                 In section .bss, align 1
     48          bool isSpin  = false; // @@@ @??@@@?@€?
   \                     isSpin:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     49          bool isStart = false; // ?@@ ?@@??@€?
   \                     isStart:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     50          bool isLed   = false; // LED ?@@
   \                     isLed:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     51          bool enableTimer = false;
   \                     enableTimer:
   \   00000000                      DS8 1
     52          

   \                                 In section .bss, align 1
     53          bool isWindowOpening = false;
   \                     isWindowOpening:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     54          bool isWindowClosing = false;
   \                     isWindowClosing:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     55          bool isClosed = true;
   \                     isClosed:
   \   00000000   0x01               DC8 1
     56          
     57          // Servo Motor variable

   \                                 In section .data, align 2
     58          uint16_t curDeg = 700, minDeg = 700, maxDeg = 2600;
   \                     curDeg:
   \   00000000   0x02BC             DC16 700

   \                                 In section .data, align 2
   \                     minDeg:
   \   00000000   0x02BC             DC16 700

   \                                 In section .data, align 2
   \                     maxDeg:
   \   00000000   0x0A28             DC16 2600
     59          
     60          // message

   \                                 In section .bss, align 4
     61          int message_index = 0;
   \                     message_index:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     62          char msg1[] = "System Start!\r\n";
   \                     msg1:
   \   00000000   0x53 0x79          DC8 "System Start!\015\012"
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x21 0x0D    
   \              0x0A 0x00    

   \                                 In section .data, align 4
     63          char msg2[] = "System End...\r\n";
   \                     msg2:
   \   00000000   0x53 0x79          DC8 "System End...\015\012"
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x20 0x45    
   \              0x6E 0x64    
   \              0x2E 0x2E    
   \              0x2E 0x0D    
   \              0x0A 0x00    

   \                                 In section .data, align 4
     64          char msg3_open[] = "Window is open\r\n";
   \                     msg3_open:
   \   00000000   0x57 0x69          DC8 "Window is open\015\012"
   \              0x6E 0x64    
   \              0x6F 0x77    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6F 0x70    
   \              0x65 0x6E    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     65          char msg3_close[] = "Window is close\r\n";
   \                     msg3_close:
   \   00000000   0x57 0x69          DC8 "Window is close\015\012"
   \              0x6E 0x64    
   \              0x6F 0x77    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x63 0x6C    
   \              0x6F 0x73    
   \              0x65 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .data, align 4
     66          char msg4_smoke_good[] = "Smoke concentration good\r\n";
   \                     msg4_smoke_good:
   \   00000000   0x53 0x6D          DC8 "Smoke concentration good\015\012"
   \              0x6F 0x6B    
   \              0x65 0x20    
   \              0x63 0x6F    
   \              0x6E 0x63    
   \              0x65 0x6E    
   \              0x74 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x67 0x6F    
   \              0x6F 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .data, align 4
     67          char msg4_smoke_bad[] = "Smoke concentration bad. need Ventilation\r\n";
   \                     msg4_smoke_bad:
   \   00000000   0x53 0x6D          DC8 "Smoke concentration bad. need Ventilation\015\012"
   \              0x6F 0x6B    
   \              0x65 0x20    
   \              0x63 0x6F    
   \              0x6E 0x63    
   \              0x65 0x6E    
   \              0x74 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x62 0x61    
   \              0x64 0x2E    
   \              0x20 0x6E    
   \              0x65 0x65    
   \              0x64 0x20    
   \              0x56 0x65    
   \              0x6E 0x74    
   \              0x69 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x0D    
   \              0x0A 0x00    

   \                                 In section .data, align 4
     68          char msg5[] = "Start Ventilation!\r\n";
   \                     msg5:
   \   00000000   0x53 0x74          DC8 "Start Ventilation!\015\012"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x56 0x65    
   \              0x6E 0x74    
   \              0x69 0x6C    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x21    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     69          char msg6[] = "Stop Ventilation.\r\n";
   \                     msg6:
   \   00000000   0x53 0x74          DC8 "Stop Ventilation.\015\012"
   \              0x6F 0x70    
   \              0x20 0x56    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x6C 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x2E 0x0D    
   \              0x0A 0x00    
     70          
     71          /*-------------Configure---------------*/

   \                                 In section .text, align 2, keep-with-next
     72          void RCC_Configure(void)
     73          {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     74              // USART2 : PA2, PA3
     75              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     76              RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF45F 0x3000      MOVS     R0,#+131072
   \   00000010   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     77              
     78              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2008             MOVS     R0,#+8
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     79              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE); // ?@@@@@ ?@@ 1 : PC2
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x2010             MOVS     R0,#+16
   \   00000020   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     80              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
   \   00000024   0x2101             MOVS     R1,#+1
   \   00000026   0x2020             MOVS     R0,#+32
   \   00000028   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     81              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE);  // ADC1 ENABLE
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0xF44F 0x7000      MOV      R0,#+512
   \   00000032   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     82              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2,ENABLE);  // ADC2 ENABLE
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0xF44F 0x6080      MOV      R0,#+1024
   \   0000003C   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     83              RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     84          
     85              RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE); // TIMER2 Enable
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     86          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE); // TIMER3 Enable
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
     87          }
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
     88          

   \                                 In section .text, align 2, keep-with-next
     89          void GPIO_Configure(void)
     90          {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     91              GPIO_InitTypeDef GPIO_InitStructure;
     92          
     93              //Servo Motor part
     94              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6; // TIM3_CH1
   \   00000002   0x2040             MOVS     R0,#+64
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     95              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000008   0x2018             MOVS     R0,#+24
   \   0000000A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     96              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000E   0x2003             MOVS     R0,#+3
   \   00000010   0xF88D 0x0002      STRB     R0,[SP, #+2]
     97              GPIO_Init(GPIOA, &GPIO_InitStructure);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x40010800
   \   0000001A   0x.... 0x....      BL       GPIO_Init
     98          
     99              // ADC_1 Part
    100              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;     // ?@@@@@ ?@@ 1 : PC2
   \   0000001E   0x2004             MOVS     R0,#+4
   \   00000020   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    101              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN; // PC2 ->  ADC (Input)                                                                                                                                                                                                    
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF88D 0x0003      STRB     R0,[SP, #+3]
    102              GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000002A   0x4669             MOV      R1,SP
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable16_4  ;; 0x40011000
   \   00000030   0x.... 0x....      BL       GPIO_Init
    103          
    104              // ADC_2 Part
    105              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;     // ?@@@@@ ?@@ 2 : PC3 - channel - 13 @wlqrkrhtlvek
   \   00000034   0x2008             MOVS     R0,#+8
   \   00000036   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    106              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN; // PC3 ->  ADC2 (Input)
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xF88D 0x0003      STRB     R0,[SP, #+3]
    107              GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   00000040   0x4669             MOV      R1,SP
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable16_4  ;; 0x40011000
   \   00000046   0x.... 0x....      BL       GPIO_Init
    108          
    109              // Motor Part
    110              // @@@??@@@ ???@@@€@€@??@@?@@@?@@@@?@ ?@@??@@??@@@?LED???@@ ?@@@
    111              // ?@@???@@?@@@??@??@@?@? ?@@
    112          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_14; // Enable Motor : PD12, PD14(?@@??OR???@@ 2@@@@€ @@@ @€??
   \   0000004A   0xF44F 0x40A0      MOV      R0,#+20480
   \   0000004E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    113          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000052   0x2010             MOVS     R0,#+16
   \   00000054   0xF88D 0x0003      STRB     R0,[SP, #+3]
    114          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   00000058   0x2003             MOVS     R0,#+3
   \   0000005A   0xF88D 0x0002      STRB     R0,[SP, #+2]
    115          	GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   0000005E   0x4669             MOV      R1,SP
   \   00000060   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40011400
   \   00000064   0x.... 0x....      BL       GPIO_Init
    116          
    117              /* USART2 pin setting */
    118              //TX
    119              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; // Tx -> PA2
   \   00000068   0x2004             MOVS     R0,#+4
   \   0000006A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    120          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // 50Mhz
   \   0000006E   0x2003             MOVS     R0,#+3
   \   00000070   0xF88D 0x0002      STRB     R0,[SP, #+2]
    121          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; // Alternate function
   \   00000074   0x2018             MOVS     R0,#+24
   \   00000076   0xF88D 0x0003      STRB     R0,[SP, #+3]
    122          	GPIO_Init(GPIOA, &GPIO_InitStructure); // PA2
   \   0000007A   0x4669             MOV      R1,SP
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x40010800
   \   00000080   0x.... 0x....      BL       GPIO_Init
    123              //RX
    124              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3; // Rx -> PA3
   \   00000084   0x2008             MOVS     R0,#+8
   \   00000086   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    125          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; // 50Mhz
   \   0000008A   0x2003             MOVS     R0,#+3
   \   0000008C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    126          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; // Pull-Up
   \   00000090   0x2028             MOVS     R0,#+40
   \   00000092   0xF88D 0x0003      STRB     R0,[SP, #+3]
    127          	GPIO_Init(GPIOA, &GPIO_InitStructure); // PA3
   \   00000096   0x4669             MOV      R1,SP
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable16_3  ;; 0x40010800
   \   0000009C   0x.... 0x....      BL       GPIO_Init
    128            
    129          }
   \   000000A0   0xBD01             POP      {R0,PC}          ;; return
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void TIM_Configure(void) {
   \                     TIM_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xB08A             SUB      SP,SP,#+40
    132              
    133              //TIM2 Configure (1sec count)
    134              TIM_TimeBaseInitTypeDef TIM2_InitStructure;
    135          
    136              TIM2_InitStructure.TIM_Prescaler = 7200;
   \   00000004   0xF44F 0x50E1      MOV      R0,#+7200
   \   00000008   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    137              TIM2_InitStructure.TIM_CounterMode = TIM_CounterMode_Up; // set upcounter mode
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    138              TIM2_InitStructure.TIM_Period = 10000; // ARR 
   \   00000012   0xF242 0x7010      MOVW     R0,#+10000
   \   00000016   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    139              TIM2_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    140          
    141              TIM_TimeBaseInit(TIM2, &TIM2_InitStructure);
   \   00000020   0xA903             ADD      R1,SP,#+12
   \   00000022   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000026   0x.... 0x....      BL       TIM_TimeBaseInit
    142              TIM_ARRPreloadConfig(TIM2, ENABLE);
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000030   0x.... 0x....      BL       TIM_ARRPreloadConfig
    143              TIM_Cmd(TIM2, ENABLE);
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   0000003A   0x.... 0x....      BL       TIM_Cmd
    144              TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
   \   0000003E   0x2201             MOVS     R2,#+1
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000046   0x.... 0x....      BL       TIM_ITConfig
    145              
    146              //TIM3 Configure
    147              TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    148              TIM_OCInitTypeDef TIM_OCInitStructure;
    149              // Configure TIM3 - Change to TIM3
    150              TIM_TimeBaseStructure.TIM_Period = 20000 - 1; // 20ms period for 50Hz PWM
   \   0000004A   0xF644 0x601F      MOVW     R0,#+19999
   \   0000004E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    151              TIM_TimeBaseStructure.TIM_Prescaler = 72 - 1;  // Assuming a 72MHz clock
   \   00000052   0x2047             MOVS     R0,#+71
   \   00000054   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    152              TIM_TimeBaseStructure.TIM_ClockDivision = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    153              TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    154              TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); // Change to TIM3
   \   00000064   0x4669             MOV      R1,SP
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   0000006A   0x.... 0x....      BL       TIM_TimeBaseInit
    155          
    156              // Configure TIM3_CH1 (PA6) as PWM output - Change to TIM3
    157              TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
   \   0000006E   0x2060             MOVS     R0,#+96
   \   00000070   0xF8AD 0x0018      STRH     R0,[SP, #+24]
    158              TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xF8AD 0x001A      STRH     R0,[SP, #+26]
    159              TIM_OCInitStructure.TIM_Pulse = 1500; // Initial duty cycle for the servo (adjust as needed)
   \   0000007A   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000007E   0xF8AD 0x001E      STRH     R0,[SP, #+30]
    160              TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF8AD 0x0020      STRH     R0,[SP, #+32]
    161              TIM_OC1Init(TIM3, &TIM_OCInitStructure); // Change to TIM3
   \   00000088   0xA906             ADD      R1,SP,#+24
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   0000008E   0x.... 0x....      BL       TIM_OC1Init
    162              TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable); // Change to TIM3
   \   00000092   0x2108             MOVS     R1,#+8
   \   00000094   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   00000098   0x.... 0x....      BL       TIM_OC1PreloadConfig
    163          
    164              // Enable TIM3 - Change to TIM3
    165              TIM_Cmd(TIM3, ENABLE);
   \   0000009C   0x2101             MOVS     R1,#+1
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   000000A2   0x.... 0x....      BL       TIM_Cmd
    166              
    167          }
   \   000000A6   0xB00B             ADD      SP,SP,#+44
   \   000000A8   0xBD00             POP      {PC}             ;; return
    168          

   \                                 In section .text, align 2, keep-with-next
    169          void Servo_posimove(int Init_duty, int Direction, int delay){
   \                     Servo_posimove: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    170                for (int dutyCycle = Init_duty; dutyCycle <= 1500; dutyCycle += Direction)
   \   00000008   0xE00C             B.N      ??Servo_posimove_0
    171              {
    172                  TIM_SetCompare1(TIM3, dutyCycle); // Change to TIM3
   \                     ??Servo_posimove_1: (+1)
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   00000014   0x.... 0x....      BL       TIM_SetCompare1
    173                  delay_ms(40*delay);  // motor ?@@@€???@@
   \   00000018   0x2028             MOVS     R0,#+40
   \   0000001A   0xFB00 0xF006      MUL      R0,R0,R6
   \   0000001E   0x.... 0x....      BL       delay_ms
    174              }
   \   00000022   0x192C             ADDS     R4,R5,R4
   \                     ??Servo_posimove_0: (+1)
   \   00000024   0xF240 0x50DD      MOVW     R0,#+1501
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xDBEE             BLT.N    ??Servo_posimove_1
    175              TIM_SetCompare1(TIM3, 1500);
   \   0000002C   0xF240 0x51DC      MOVW     R1,#+1500
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   00000034   0x.... 0x....      BL       TIM_SetCompare1
    176          }
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void Servo_negamove(int Init_duty, int Direction,int delay){
   \                     Servo_negamove: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    179                for (int dutyCycle = Init_duty; dutyCycle >= 1500; dutyCycle -= Direction)
   \   00000008   0xE00C             B.N      ??Servo_negamove_0
    180              {
    181                  TIM_SetCompare1(TIM3, dutyCycle); // Change to TIM3
   \                     ??Servo_negamove_1: (+1)
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x0001             MOVS     R1,R0
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   00000014   0x.... 0x....      BL       TIM_SetCompare1
    182                  delay_ms(40*delay);  // motor ?@@@€???@@
   \   00000018   0x2028             MOVS     R0,#+40
   \   0000001A   0xFB00 0xF006      MUL      R0,R0,R6
   \   0000001E   0x.... 0x....      BL       delay_ms
    183              }
   \   00000022   0x1B64             SUBS     R4,R4,R5
   \                     ??Servo_negamove_0: (+1)
   \   00000024   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000028   0x4284             CMP      R4,R0
   \   0000002A   0xDAEE             BGE.N    ??Servo_negamove_1
    184              TIM_SetCompare1(TIM3, 1500);
   \   0000002C   0xF240 0x51DC      MOVW     R1,#+1500
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable16_6  ;; 0x40000400
   \   00000034   0x.... 0x....      BL       TIM_SetCompare1
    185          }
   \   00000038   0xBD70             POP      {R4-R6,PC}       ;; return
    186          

   \                                 In section .text, align 2, keep-with-next
    187          void delay_ms(uint32_t ms)
    188          {
   \                     delay_ms: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    189              volatile uint32_t nCount;
    190              RCC_ClocksTypeDef RCC_Clocks;
    191              RCC_GetClocksFreq(&RCC_Clocks);
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      BL       RCC_GetClocksFreq
    192              nCount = (RCC_Clocks.HCLK_Frequency / 10000) * ms;
   \   0000000C   0x9802             LDR      R0,[SP, #+8]
   \   0000000E   0xF242 0x7110      MOVW     R1,#+10000
   \   00000012   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000016   0xFB04 0xF400      MUL      R4,R4,R0
   \   0000001A   0x9400             STR      R4,[SP, #+0]
   \   0000001C   0xE002             B.N      ??delay_ms_0
    193              for (; nCount != 0; nCount--)
   \                     ??delay_ms_1: (+1)
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x1E40             SUBS     R0,R0,#+1
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \                     ??delay_ms_0: (+1)
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD1F9             BNE.N    ??delay_ms_1
    194                  ;
    195          }
   \   0000002A   0xB006             ADD      SP,SP,#+24
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    196          
    197          

   \                                 In section .text, align 2, keep-with-next
    198          void USART2_Init(void) {
   \                     USART2_Init: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    199              USART_InitTypeDef USART2_InitStructure;
    200          
    201          	// Enable the USART2 peripheral
    202          	USART_Cmd(USART2, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   00000008   0x.... 0x....      BL       USART_Cmd
    203          	// TODO: Initialize the USART using the structure 'USART_InitTypeDef' and the function 'USART_Init'
    204          	USART2_InitStructure.USART_BaudRate = 9600;
   \   0000000C   0xF44F 0x5016      MOV      R0,#+9600
   \   00000010   0x9000             STR      R0,[SP, #+0]
    205          	USART2_InitStructure.USART_WordLength = USART_WordLength_8b;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    206          	USART2_InitStructure.USART_StopBits = USART_StopBits_1;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
    207          	USART2_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // CTS, RTS x
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    208          	USART2_InitStructure.USART_Parity = USART_Parity_No;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    209          	USART2_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
   \   0000002A   0x200C             MOVS     R0,#+12
   \   0000002C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    210          	USART_Init(USART2, &USART2_InitStructure); 
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   00000036   0x.... 0x....      BL       USART_Init
    211          	
    212          	// TODO: Enable the USART2 RX interrupts using the function 'USART_ITConfig' and the argument lightValue 'Receive Data register not empty interrupt'
    213          	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE); // Rx -> interrupt enable
   \   0000003A   0x2201             MOVS     R2,#+1
   \   0000003C   0xF240 0x5125      MOVW     R1,#+1317
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   00000044   0x.... 0x....      BL       USART_ITConfig
    214          }
   \   00000048   0xB005             ADD      SP,SP,#+20
   \   0000004A   0xBD00             POP      {PC}             ;; return
    215          

   \                                 In section .text, align 2, keep-with-next
    216          void NVIC_Configure(void) {
   \                     NVIC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    217          
    218              NVIC_InitTypeDef NVIC_InitStructure;
    219              NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
   \   00000002   0xF44F 0x60A0      MOV      R0,#+1280
   \   00000006   0x.... 0x....      BL       NVIC_PriorityGroupConfig
    220              
    221              // Timer 2
    222              NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
   \   0000000A   0x201C             MOVS     R0,#+28
   \   0000000C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    223          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
    224          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF88D 0x0001      STRB     R0,[SP, #+1]
    225          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF88D 0x0002      STRB     R0,[SP, #+2]
    226          	NVIC_Init(&NVIC_InitStructure);
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x.... 0x....      BL       NVIC_Init
    227          
    228              // Timer 3
    229          	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
   \   00000028   0x201D             MOVS     R0,#+29
   \   0000002A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    230          	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xF88D 0x0003      STRB     R0,[SP, #+3]
    231          	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xF88D 0x0001      STRB     R0,[SP, #+1]
    232          	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xF88D 0x0002      STRB     R0,[SP, #+2]
    233          	NVIC_Init(&NVIC_InitStructure);
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x.... 0x....      BL       NVIC_Init
    234          
    235              //ADC part
    236              NVIC_InitStructure.NVIC_IRQChannel = ADC1_2_IRQn;
   \   00000046   0x2012             MOVS     R0,#+18
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
    237              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    238              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xF88D 0x0002      STRB     R0,[SP, #+2]
    239              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
   \   00000058   0x2002             MOVS     R0,#+2
   \   0000005A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    240              NVIC_Init(&NVIC_InitStructure);
   \   0000005E   0x4668             MOV      R0,SP
   \   00000060   0x.... 0x....      BL       NVIC_Init
    241          
    242              // USART2
    243              // 'NVIC_EnableIRQ' is only required for USART setting
    244              NVIC_EnableIRQ(USART2_IRQn);
   \   00000064   0x2026             MOVS     R0,#+38
   \   00000066   0x.... 0x....      BL       __NVIC_EnableIRQ
    245              NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
   \   0000006A   0x2026             MOVS     R0,#+38
   \   0000006C   0xF88D 0x0000      STRB     R0,[SP, #+0]
    246              NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3; // TODO
   \   00000070   0x2003             MOVS     R0,#+3
   \   00000072   0xF88D 0x0001      STRB     R0,[SP, #+1]
    247              NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3; // TODO
   \   00000076   0x2003             MOVS     R0,#+3
   \   00000078   0xF88D 0x0002      STRB     R0,[SP, #+2]
    248              NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0xF88D 0x0003      STRB     R0,[SP, #+3]
    249              NVIC_Init(&NVIC_InitStructure);
   \   00000082   0x4668             MOV      R0,SP
   \   00000084   0x.... 0x....      BL       NVIC_Init
    250          }
   \   00000088   0xBD01             POP      {R0,PC}          ;; return
    251          

   \                                 In section .text, align 2, keep-with-next
    252          void ADC_Configure(void){
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    253          	
    254              ADC_InitTypeDef ADC_12; // ADC12 @@@ -> PC2
    255             
    256              ADC_12.ADC_ContinuousConvMode = ENABLE; // ContinuousConv : @@@ @@@?@@ ?@@@@@
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0xF88D 0x0005      STRB     R0,[SP, #+5]
    257              ADC_12.ADC_DataAlign = ADC_DataAlign_Right; // Little Endian
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9003             STR      R0,[SP, #+12]
    258              ADC_12.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   0000000E   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000012   0x9002             STR      R0,[SP, #+8]
    259              ADC_12.ADC_Mode = ADC_Mode_Independent; // Independent 
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9000             STR      R0,[SP, #+0]
    260              ADC_12.ADC_NbrOfChannel = 1; // ?@@?@@ channel??@@@
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xF88D 0x0010      STRB     R0,[SP, #+16]
    261              ADC_12.ADC_ScanConvMode = DISABLE; 
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0004      STRB     R0,[SP, #+4]
    262              
    263              // ADC1 - PC2
    264              ADC_Init(ADC1, &ADC_12);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   0000002A   0x.... 0x....      BL       ADC_Init
    265              ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_239Cycles5); // @@@???@@@?@@@ ?@@ ?@@@€ @@@?????
   \   0000002E   0x2307             MOVS     R3,#+7
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0x210C             MOVS     R1,#+12
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000038   0x.... 0x....      BL       ADC_RegularChannelConfig
    266              ADC_ITConfig(ADC1, ADC_IT_EOC, ENABLE);
   \   0000003C   0x2201             MOVS     R2,#+1
   \   0000003E   0xF44F 0x7108      MOV      R1,#+544
   \   00000042   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000046   0x.... 0x....      BL       ADC_ITConfig
    267              ADC_Cmd(ADC1, ENABLE);
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000050   0x.... 0x....      BL       ADC_Cmd
    268              ADC_ResetCalibration(ADC1);
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000058   0x.... 0x....      BL       ADC_ResetCalibration
    269              while(ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_0: (+1)
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000060   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD1F9             BNE.N    ??ADC_Configure_0
    270              ADC_StartCalibration(ADC1);
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   0000006C   0x.... 0x....      BL       ADC_StartCalibration
    271              while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_1: (+1)
   \   00000070   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000074   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD1F9             BNE.N    ??ADC_Configure_1
    272              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000082   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    273          
    274              // ADC2 - PC3
    275              ADC_Init(ADC2, &ADC_12);
   \   00000086   0x4669             MOV      R1,SP
   \   00000088   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   0000008C   0x.... 0x....      BL       ADC_Init
    276              ADC_RegularChannelConfig(ADC2, ADC_Channel_13, 1, ADC_SampleTime_239Cycles5);
   \   00000090   0x2307             MOVS     R3,#+7
   \   00000092   0x2201             MOVS     R2,#+1
   \   00000094   0x210D             MOVS     R1,#+13
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   0000009A   0x.... 0x....      BL       ADC_RegularChannelConfig
    277              ADC_ITConfig(ADC2, ADC_IT_EOC, ENABLE);
   \   0000009E   0x2201             MOVS     R2,#+1
   \   000000A0   0xF44F 0x7108      MOV      R1,#+544
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000A8   0x.... 0x....      BL       ADC_ITConfig
    278              ADC_Cmd(ADC2, ENABLE);
   \   000000AC   0x2101             MOVS     R1,#+1
   \   000000AE   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000B2   0x.... 0x....      BL       ADC_Cmd
    279              ADC_ResetCalibration(ADC2);
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000BA   0x.... 0x....      BL       ADC_ResetCalibration
    280              while(ADC_GetResetCalibrationStatus(ADC2));
   \                     ??ADC_Configure_2: (+1)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000C2   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   000000C6   0x2800             CMP      R0,#+0
   \   000000C8   0xD1F9             BNE.N    ??ADC_Configure_2
    281              ADC_StartCalibration(ADC2);
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000CE   0x.... 0x....      BL       ADC_StartCalibration
    282              while(ADC_GetCalibrationStatus(ADC2));
   \                     ??ADC_Configure_3: (+1)
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000D6   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD1F9             BNE.N    ??ADC_Configure_3
    283              ADC_SoftwareStartConvCmd(ADC2, ENABLE);
   \   000000DE   0x2101             MOVS     R1,#+1
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000E4   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
    284              //ADC multi channel@??@@ ?@@??@@@ @@@?@@ @??@@@@@***********************
    285          }
   \   000000E8   0xB005             ADD      SP,SP,#+20
   \   000000EA   0xBD00             POP      {PC}             ;; return
    286          
    287          /*-------------Handler---------------*/

   \                                 In section .text, align 2, keep-with-next
    288          void USART2_IRQHandler() { // ?@@??@?@@@?
   \                     USART2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    289              uint16_t word;
    290              if(USART_GetITStatus(USART2,USART_IT_RXNE) != RESET){
   \   00000002   0xF240 0x5125      MOVW     R1,#+1317
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   0000000A   0x.... 0x....      BL       USART_GetITStatus
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD064             BEQ.N    ??USART2_IRQHandler_0
    291                  // the most recent received data by the USART2 peripheral
    292                  word = USART_ReceiveData(USART2);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   00000016   0x.... 0x....      BL       USART_ReceiveData
    293                  if(word == '1'){ // ?@@ ?@@ ?@@???@@ ?@@
   \   0000001A   0x0001             MOVS     R1,R0
   \   0000001C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000001E   0x2931             CMP      R1,#+49
   \   00000020   0xD108             BNE.N    ??USART2_IRQHandler_1
    294                    // TODO implement*********************
    295                    // LCD??received message text@??@?
    296                    isStart = true; 
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    297                    message_index = 1;
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   00000030   0x6008             STR      R0,[R1, #+0]
   \   00000032   0xE04D             B.N      ??USART2_IRQHandler_2
    298          
    299                  } else if (word == '2'){ // ?@@???@@ @@@
   \                     ??USART2_IRQHandler_1: (+1)
   \   00000034   0x0001             MOVS     R1,R0
   \   00000036   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000038   0x2932             CMP      R1,#+50
   \   0000003A   0xD104             BNE.N    ??USART2_IRQHandler_3
    300                     message_index = 2;
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   00000042   0x6008             STR      R0,[R1, #+0]
   \   00000044   0xE044             B.N      ??USART2_IRQHandler_2
    301                      
    302                  } else if (word == '3'){ // @@@ ?@@ @@@
   \                     ??USART2_IRQHandler_3: (+1)
   \   00000046   0x0001             MOVS     R1,R0
   \   00000048   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000004A   0x2933             CMP      R1,#+51
   \   0000004C   0xD104             BNE.N    ??USART2_IRQHandler_4
    303                    
    304                      message_index = 3;
   \   0000004E   0x2003             MOVS     R0,#+3
   \   00000050   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   00000054   0x6008             STR      R0,[R1, #+0]
   \   00000056   0xE03B             B.N      ??USART2_IRQHandler_2
    305          
    306                  } else if (word == '4'){ // ?@@ ?@@ @@@
   \                     ??USART2_IRQHandler_4: (+1)
   \   00000058   0x0001             MOVS     R1,R0
   \   0000005A   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000005C   0x2934             CMP      R1,#+52
   \   0000005E   0xD104             BNE.N    ??USART2_IRQHandler_5
    307          
    308                      message_index = 4;
   \   00000060   0x2004             MOVS     R0,#+4
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   00000066   0x6008             STR      R0,[R1, #+0]
   \   00000068   0xE032             B.N      ??USART2_IRQHandler_2
    309          
    310                  } else if (word == '5' && isStart == 1){ // ?@@ ?@@ ?@@
   \                     ??USART2_IRQHandler_5: (+1)
   \   0000006A   0x0001             MOVS     R1,R0
   \   0000006C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000006E   0x2935             CMP      R1,#+53
   \   00000070   0xD118             BNE.N    ??USART2_IRQHandler_6
   \   00000072   0x.... 0x....      LDR.W    R1,??DataTable16_10
   \   00000076   0x7809             LDRB     R1,[R1, #+0]
   \   00000078   0x2901             CMP      R1,#+1
   \   0000007A   0xD113             BNE.N    ??USART2_IRQHandler_6
    311          
    312                      if (isSpin == false){
   \   0000007C   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   00000080   0x7800             LDRB     R0,[R0, #+0]
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD124             BNE.N    ??USART2_IRQHandler_2
    313                          message_index = 5;
   \   00000086   0x2005             MOVS     R0,#+5
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   0000008C   0x6008             STR      R0,[R1, #+0]
    314                          // TODO: ?@@@@@
    315                          current_time = 0;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   00000094   0x6008             STR      R0,[R1, #+0]
    316                          enableTimer = false;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable16_14
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    317                          startMotor(); // DC @@@ ?@@ ?@@ ?@@
   \   0000009E   0x.... 0x....      BL       startMotor
   \   000000A2   0xE015             B.N      ??USART2_IRQHandler_2
    318                      }
    319          
    320                  } else if (word == '6'){ // ?@@ ?@@ @@@ 
   \                     ??USART2_IRQHandler_6: (+1)
   \   000000A4   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000000A6   0x2836             CMP      R0,#+54
   \   000000A8   0xD112             BNE.N    ??USART2_IRQHandler_2
    321          
    322                      if (isSpin == true){
   \   000000AA   0x.... 0x....      LDR.W    R0,??DataTable16_12
   \   000000AE   0x7800             LDRB     R0,[R0, #+0]
   \   000000B0   0x2801             CMP      R0,#+1
   \   000000B2   0xD10D             BNE.N    ??USART2_IRQHandler_2
    323                          message_index = 6;
   \   000000B4   0x2006             MOVS     R0,#+6
   \   000000B6   0x.... 0x....      LDR.W    R1,??DataTable16_11
   \   000000BA   0x6008             STR      R0,[R1, #+0]
    324                          // TODO: ?@@@@@, DC @@@ @@? ?@@ ?@@
    325                          current_time = 0;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   000000C2   0x6008             STR      R0,[R1, #+0]
    326                          stopMotor();
   \   000000C4   0x.... 0x....      BL       stopMotor
    327                          enableTimer = true;
   \   000000C8   0x2001             MOVS     R0,#+1
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable16_14
   \   000000CE   0x7008             STRB     R0,[R1, #+0]
    328                      }
    329                  }
    330                  // clear 'Read data register not empty' flag
    331              	USART_ClearITPendingBit(USART2,USART_IT_RXNE);
   \                     ??USART2_IRQHandler_2: (+1)
   \   000000D0   0xF240 0x5125      MOVW     R1,#+1317
   \   000000D4   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   000000D8   0x.... 0x....      BL       USART_ClearITPendingBit
    332              }
    333          }
   \                     ??USART2_IRQHandler_0: (+1)
   \   000000DC   0xBD01             POP      {R0,PC}          ;; return
    334          

   \                                 In section .text, align 2, keep-with-next
    335          void sendDataUART2(uint16_t data) {
   \                     sendDataUART2: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x0001             MOVS     R1,R0
    336             /* Wait till TC is set */
    337             while ((USART2->SR & USART_SR_TC) == 0);
   \                     ??sendDataUART2_0: (+1)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0x0640             LSLS     R0,R0,#+25
   \   0000000C   0xD5FA             BPL.N    ??sendDataUART2_0
    338             USART_SendData(USART2, data);
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_7  ;; 0x40004400
   \   00000014   0x.... 0x....      BL       USART_SendData
    339          }
   \   00000018   0xBD01             POP      {R0,PC}          ;; return
    340          

   \                                 In section .text, align 2, keep-with-next
    341          void ADC1_2_IRQHandler(void) {  // ?@@@@@ ?@@@@@ @@@??@wlqrkrhtlvek
   \                     ADC1_2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    342          
    343            // ADC_1 value(PC2) - ?@@ ?@@
    344            if(ADC_GetITStatus(ADC1,ADC_IT_EOC) != RESET) {
   \   00000002   0xF44F 0x7108      MOV      R1,#+544
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   0000000A   0x.... 0x....      BL       ADC_GetITStatus
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD01A             BEQ.N    ??ADC1_2_IRQHandler_0
    345              analogData_1 = ADC_GetConversionValue(ADC1);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000016   0x.... 0x....      BL       ADC_GetConversionValue
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable16_15
   \   0000001E   0x8008             STRH     R0,[R1, #+0]
    346              if ((int)analogData_1 <= SMOKE_FLAG && enableTimer == true && timer_status == NO_TIMER){ // ?@@ ?@@ ?@@ ??/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable16_16
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x.... 0x....      LDR.W    R1,??DataTable16_15
   \   0000002A   0x8809             LDRH     R1,[R1, #+0]
   \   0000002C   0x4288             CMP      R0,R1
   \   0000002E   0xDB0B             BLT.N    ??ADC1_2_IRQHandler_0
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD106             BNE.N    ??ADC1_2_IRQHandler_0
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable16_17
   \   0000003E   0x6800             LDR      R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD101             BNE.N    ??ADC1_2_IRQHandler_0
    347                  startVen();
   \   00000044   0x.... 0x....      BL       startVen
    348              }
    349            }
    350            ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
   \                     ??ADC1_2_IRQHandler_0: (+1)
   \   00000048   0xF44F 0x7108      MOV      R1,#+544
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable16_8  ;; 0x40012400
   \   00000050   0x.... 0x....      BL       ADC_ClearITPendingBit
    351          
    352            // ADC_2 value(PC3) - @@@ ?@@
    353            if(ADC_GetITStatus(ADC2,ADC_IT_EOC) != RESET) {
   \   00000054   0xF44F 0x7108      MOV      R1,#+544
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   0000005C   0x.... 0x....      BL       ADC_GetITStatus
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD01A             BEQ.N    ??ADC1_2_IRQHandler_1
    354              analogData_2 = ADC_GetConversionValue(ADC2);
   \   00000064   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   00000068   0x.... 0x....      BL       ADC_GetConversionValue
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable16_18
   \   00000070   0x8008             STRH     R0,[R1, #+0]
    355              if ((int)analogData_2 <= LIGHT_FLAG && enableTimer == true && timer_status == NO_TIMER){ // ?@@ ?@@ ?@@ ??/////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable16_19
   \   00000076   0x6800             LDR      R0,[R0, #+0]
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable16_18
   \   0000007C   0x8809             LDRH     R1,[R1, #+0]
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xDB0B             BLT.N    ??ADC1_2_IRQHandler_1
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD106             BNE.N    ??ADC1_2_IRQHandler_1
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable16_17
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD101             BNE.N    ??ADC1_2_IRQHandler_1
    356                  startVen();
   \   00000096   0x.... 0x....      BL       startVen
    357              }
    358            }
    359            ADC_ClearITPendingBit(ADC2, ADC_IT_EOC);
   \                     ??ADC1_2_IRQHandler_1: (+1)
   \   0000009A   0xF44F 0x7108      MOV      R1,#+544
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable16_9  ;; 0x40012800
   \   000000A2   0x.... 0x....      BL       ADC_ClearITPendingBit
    360          
    361          }
   \   000000A6   0xBD01             POP      {R0,PC}          ;; return
    362          

   \                                 In section .text, align 2, keep-with-next
    363          void TIM2_IRQHandler() { // 1@@@ ?@@???@@
   \                     TIM2_IRQHandler: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    364          	if(TIM_GetITStatus(TIM2,TIM_IT_Update) != RESET) {
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000008   0x.... 0x....      BL       TIM_GetITStatus
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD032             BEQ.N    ??TIM2_IRQHandler_0
    365                  if (timer_status != NO_TIMER && enableTimer == true){
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable16_17
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD00B             BEQ.N    ??TIM2_IRQHandler_1
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD106             BNE.N    ??TIM2_IRQHandler_1
    366                      current_time++;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable16_13
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x1C40             ADDS     R0,R0,#+1
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   00000030   0x6008             STR      R0,[R1, #+0]
    367                  }
    368          	if (timer_status == TWENTY_SEC  && enableTimer == true){
   \                     ??TIM2_IRQHandler_1: (+1)
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable16_17
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x280A             CMP      R0,#+10
   \   0000003A   0xD117             BNE.N    ??TIM2_IRQHandler_2
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable16_14
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD112             BNE.N    ??TIM2_IRQHandler_2
    369                      if (current_time >= TWENTY_SEC){ // 20@?@@@??timeout
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable16_13
   \   0000004A   0x6800             LDR      R0,[R0, #+0]
   \   0000004C   0x280A             CMP      R0,#+10
   \   0000004E   0xDB0D             BLT.N    ??TIM2_IRQHandler_2
    370                          timer_status = NO_TIMER;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x.... 0x....      LDR.W    R1,??DataTable16_17
   \   00000056   0x6008             STR      R0,[R1, #+0]
    371                          current_time = 0;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    372                          isLed = false;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   00000066   0x7008             STRB     R0,[R1, #+0]
    373                          // TODO : @@@ @@@ ?@@ ?@@
    374                          stopMotor();
   \   00000068   0x.... 0x....      BL       stopMotor
    375                      } 
    376                  }
    377          	TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
   \                     ??TIM2_IRQHandler_2: (+1)
   \   0000006C   0x2101             MOVS     R1,#+1
   \   0000006E   0xF05F 0x4080      MOVS     R0,#+1073741824
   \   00000072   0x.... 0x....      BL       TIM_ClearITPendingBit
    378          	}
    379          }
   \                     ??TIM2_IRQHandler_0: (+1)
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
    380          
    381          // TODO : ?@@ @@??@@ ?@@

   \                                 In section .text, align 2, keep-with-next
    382          void startVen(){ // ?@@ ?@@
   \                     startVen: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    383              timer_status = TWENTY_SEC;
   \   00000002   0x200A             MOVS     R0,#+10
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable16_17
   \   00000008   0x6008             STR      R0,[R1, #+0]
    384              current_time = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable16_13
   \   00000010   0x6008             STR      R0,[R1, #+0]
    385              isLed = false;
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   00000018   0x7008             STRB     R0,[R1, #+0]
    386              // TODO : @@@ ?@@ ?@@ ?@@
    387              startMotor();    
   \   0000001A   0x.... 0x....      BL       startMotor
    388              // TODO : LED @@@@?@@@ ?@@ ?@@
    389              LED_On();    
   \   0000001E   0x.... 0x....      BL       LED_On
    390          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    391          

   \                                 In section .text, align 2, keep-with-next
    392          void startMotor(){ // DC @@@ ?@@
   \                     startMotor: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    393              isSpin = true;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable16_12
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    394              if(isClosed) isWindowOpening = true;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable16_21
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD003             BEQ.N    ??startMotor_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable16_22
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    395              isWindowOpening = true;
   \                     ??startMotor_0: (+1)
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable16_22
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    396              if (isLed == false){
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable16_20
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD101             BNE.N    ??startMotor_1
    397                  LED_On();
   \   0000002E   0x.... 0x....      BL       LED_On
    398              }
    399              
    400              //Servo_negamove(2500, 100, 5);
    401               GPIO_ResetBits(GPIOD, GPIO_Pin_12);   // Motor On
   \                     ??startMotor_1: (+1)
   \   00000032   0xF44F 0x5180      MOV      R1,#+4096
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40011400
   \   0000003A   0x.... 0x....      BL       GPIO_ResetBits
    402          }
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return
    403          

   \                                 In section .text, align 2, keep-with-next
    404          void stopMotor(){ // @@@ @@?
   \                     stopMotor: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    405              isSpin = false;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable16_12
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    406              if(!isClosed) isWindowClosing = true;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable16_21
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD103             BNE.N    ??stopMotor_0
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable16_23
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    407              if (isLed == true){
   \                     ??stopMotor_0: (+1)
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable16_20
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD101             BNE.N    ??stopMotor_1
    408                  LED_Off();
   \   00000026   0x.... 0x....      BL       LED_Off
    409              }
    410              // GPIO_SetBits(GPIOD, GPIO_Pin_12);   // Motor Off
    411              GPIO_SetBits(GPIOD, GPIO_Pin_12);
   \                     ??stopMotor_1: (+1)
   \   0000002A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40011400
   \   00000032   0x.... 0x....      BL       GPIO_SetBits
    412          }
   \   00000036   0xBD01             POP      {R0,PC}          ;; return
    413          
    414          // @@@ : @@@??Set?@@ @@@ LED??Reset?@@ ?@@. vise versa
    415          

   \                                 In section .text, align 2, keep-with-next
    416          void LED_On(void){
   \                     LED_On: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    417              isLed = true;
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    418              GPIO_SetBits(GPIOD, GPIO_Pin_14); 
   \   0000000A   0xF44F 0x4180      MOV      R1,#+16384
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40011400
   \   00000012   0x.... 0x....      BL       GPIO_SetBits
    419          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    420          

   \                                 In section .text, align 2, keep-with-next
    421          void LED_Off(void){
   \                     LED_Off: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    422              isLed = false;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable16_20
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    423              GPIO_ResetBits(GPIOD, GPIO_Pin_14); 
   \   0000000A   0xF44F 0x4180      MOV      R1,#+16384
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable16_5  ;; 0x40011400
   \   00000012   0x.... 0x....      BL       GPIO_ResetBits
    424          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    425          
    426          /*-------------main---------------*/
    427           

   \                                 In section .text, align 2, keep-with-next
    428          int main(void)
    429          {
   \                     main: (+1)
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
    430              SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
    431              RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
    432              GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
    433              TIM_Configure();
   \   0000000E   0x.... 0x....      BL       TIM_Configure
    434              USART2_Init();
   \   00000012   0x.... 0x....      BL       USART2_Init
    435              ADC_Configure();
   \   00000016   0x.... 0x....      BL       ADC_Configure
    436              NVIC_Configure();
   \   0000001A   0x.... 0x....      BL       NVIC_Configure
    437              
    438              GPIO_SetBits(GPIOD, GPIO_Pin_12);  // Motor
   \   0000001E   0xF44F 0x5180      MOV      R1,#+4096
   \   00000022   0x....             LDR.N    R0,??DataTable16_5  ;; 0x40011400
   \   00000024   0x.... 0x....      BL       GPIO_SetBits
    439              GPIO_ResetBits(GPIOD, GPIO_Pin_14);  // LED
   \   00000028   0xF44F 0x4180      MOV      R1,#+16384
   \   0000002C   0x....             LDR.N    R0,??DataTable16_5  ;; 0x40011400
   \   0000002E   0x.... 0x....      BL       GPIO_ResetBits
    440              // --------    
    441              LCD_Init();
   \   00000032   0x.... 0x....      BL       LCD_Init
   \   00000036   0xE032             B.N      ??main_0
    442          
    443              while(true){
    444                  LCD_Clear(WHITE);
    445                  LCD_ShowString(20, 40,  "1 : START SYSTEM", BLACK, WHITE);
    446                  LCD_ShowString(20, 60,  "2 : STOP SYSTEM", BLACK, WHITE);
    447                  LCD_ShowString(20, 80,  "3 : SHOW WINDOW STATUS", BLACK, WHITE);
    448                  LCD_ShowString(20, 100, "4 : SHOW SMOKE VALUE", BLACK, WHITE);
    449                  LCD_ShowString(20, 120, "5 : OPEN WINDOW", BLACK, WHITE);
    450                  LCD_ShowString(20, 140, "6 : CLOSE WINDOW", BLACK, WHITE);
    451                  while (isStart == false){}
    452                  while (isStart == true) {
    453                      if (message_index == 1){
    454                          for(int i = 0; msg1[i] != '\0'; i++) sendDataUART2(msg1[i]);
    455                      } else if (message_index == 2){
   \                     ??main_1: (+1)
   \   00000038   0x....             LDR.N    R0,??DataTable16_11
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD00B             BEQ.N    ??main_2
    456                          isStart = false;
    457                          for(int i = 0; msg2[i] != '\0'; i++) sendDataUART2(msg2[i]);
    458                          break;
    459                      } else if (message_index == 3){ // @@@ ?@@ ?@@
   \                     ??main_3: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable16_11
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x2803             CMP      R0,#+3
   \   00000046   0xF040 0x8096      BNE.W    ??main_4
    460                          if (isSpin == true){
   \   0000004A   0x....             LDR.N    R0,??DataTable16_12
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xF040 0x8081      BNE.W    ??main_5
    461                              for(int i = 0; msg3_open[i] != '\0'; i++) sendDataUART2(msg3_open[i]);
   \   00000054   0x2400             MOVS     R4,#+0
   \   00000056   0xE07A             B.N      ??main_6
   \                     ??main_2: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x....             LDR.N    R1,??DataTable16_10
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
   \   0000005E   0x2400             MOVS     R4,#+0
   \   00000060   0xE005             B.N      ??main_7
   \                     ??main_8: (+1)
   \   00000062   0x....             LDR.N    R0,??DataTable16_24
   \   00000064   0x5D00             LDRB     R0,[R0, R4]
   \   00000066   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000068   0x.... 0x....      BL       sendDataUART2
   \   0000006C   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_7: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable16_24
   \   00000070   0x5D00             LDRB     R0,[R0, R4]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD1F5             BNE.N    ??main_8
    462                          }
    463                          if (isSpin == false){
    464                              for(int i = 0; msg3_close[i] != '\0'; i++) sendDataUART2(msg3_close[i]);
    465                          }
    466                      } else if (message_index == 4){
    467                          if ((int)analogData_1 <= SMOKE_FLAG){ // ?@@ ?@@ ?@@ ?
    468                              for(int i = 0; msg4_smoke_bad[i] != '\0'; i++) sendDataUART2(msg4_smoke_bad[i]);
    469                          }
    470                          else{                                 // ?@@ ?@@ @@@???
    471                              for(int i = 0; msg4_smoke_good[i] != '\0'; i++) sendDataUART2(msg4_smoke_good[i]);
    472                          }
    473                      } else if (message_index == 5){
    474                          for(int i = 0; msg5[i] != '\0'; i++) sendDataUART2(msg5[i]);
    475                      } else if (message_index == 6){
    476                          for(int i = 0; msg6[i] != '\0'; i++) sendDataUART2(msg6[i]);
    477                      }
    478                      message_index = 0;
    479          
    480                      //
    481                      if( isWindowOpening == true && isWindowClosing == false && isClosed == true){ // open
    482                        Servo_posimove(500, 100, 1); // open
    483                        isClosed = false;
    484                        isWindowOpening = false;
    485                      } else if( isWindowOpening == false && isWindowClosing == true && isClosed == false ){ //close
    486                        Servo_negamove(2500, 100, 1); // open
    487                        isClosed = true;
    488                        isWindowClosing = false;
    489                      }
    490                      //
    491          
    492                      if(isSpin == true){
    493                          LCD_ShowString(80, 240, " ON", BLACK, WHITE);
    494                      } else {
    495                          LCD_ShowString(80, 240, "OFF", BLACK, WHITE);
    496                      }
    497                      LCD_ShowNum(120,200, current_time, 2, BLACK, WHITE);
    498          
    499                      LCD_ShowString(20, 0,  "YEON1 : ", BLACK, WHITE);
    500                      LCD_ShowString(20, 20, "JODO2 : ", BLACK, WHITE);
    501                      
    502                      LCD_ShowNum(80, 260, (int)analogData_1, 4, BLACK, WHITE);
                                             ^
Warning[Pe069]: integer conversion resulted in truncation
    503                      LCD_ShowNum(80, 280, (int)analogData_2, 4, BLACK, WHITE);
                                             ^
Warning[Pe069]: integer conversion resulted in truncation
    504                  }
    505                  stopMotor();
   \                     ??main_9: (+1)
   \   00000076   0x.... 0x....      BL       stopMotor
    506                  timer_status = NO_TIMER;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x....             LDR.N    R1,??DataTable16_17
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    507                  enableTimer = false;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x....             LDR.N    R1,??DataTable16_14
   \   00000084   0x7008             STRB     R0,[R1, #+0]
    508                  current_time = 0;
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x....             LDR.N    R1,??DataTable16_13
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    509                  isWindowOpening = false;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x....             LDR.N    R1,??DataTable16_22
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    510                  isWindowClosing = false;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x....             LDR.N    R1,??DataTable16_23
   \   00000096   0x7008             STRB     R0,[R1, #+0]
    511                  isClosed = true;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable16_21
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
   \                     ??main_0: (+1)
   \   0000009E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000A2   0x.... 0x....      BL       LCD_Clear
   \   000000A6   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0x2300             MOVS     R3,#+0
   \   000000AE   0x....             LDR.N    R2,??DataTable16_25
   \   000000B0   0x2128             MOVS     R1,#+40
   \   000000B2   0x2014             MOVS     R0,#+20
   \   000000B4   0x.... 0x....      BL       LCD_ShowString
   \   000000B8   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0x2300             MOVS     R3,#+0
   \   000000C0   0x....             LDR.N    R2,??DataTable16_26
   \   000000C2   0x213C             MOVS     R1,#+60
   \   000000C4   0x2014             MOVS     R0,#+20
   \   000000C6   0x.... 0x....      BL       LCD_ShowString
   \   000000CA   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0x2300             MOVS     R3,#+0
   \   000000D2   0x....             LDR.N    R2,??DataTable16_27
   \   000000D4   0x2150             MOVS     R1,#+80
   \   000000D6   0x2014             MOVS     R0,#+20
   \   000000D8   0x.... 0x....      BL       LCD_ShowString
   \   000000DC   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000E0   0x9000             STR      R0,[SP, #+0]
   \   000000E2   0x2300             MOVS     R3,#+0
   \   000000E4   0x....             LDR.N    R2,??DataTable16_28
   \   000000E6   0x2164             MOVS     R1,#+100
   \   000000E8   0x2014             MOVS     R0,#+20
   \   000000EA   0x.... 0x....      BL       LCD_ShowString
   \   000000EE   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000000F2   0x9000             STR      R0,[SP, #+0]
   \   000000F4   0x2300             MOVS     R3,#+0
   \   000000F6   0x....             LDR.N    R2,??DataTable16_29
   \   000000F8   0x2178             MOVS     R1,#+120
   \   000000FA   0x2014             MOVS     R0,#+20
   \   000000FC   0x.... 0x....      BL       LCD_ShowString
   \   00000100   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000104   0x9000             STR      R0,[SP, #+0]
   \   00000106   0x2300             MOVS     R3,#+0
   \   00000108   0x....             LDR.N    R2,??DataTable16_30
   \   0000010A   0x218C             MOVS     R1,#+140
   \   0000010C   0x2014             MOVS     R0,#+20
   \   0000010E   0x.... 0x....      BL       LCD_ShowString
   \                     ??main_10: (+1)
   \   00000112   0x....             LDR.N    R0,??DataTable16_10
   \   00000114   0x7800             LDRB     R0,[R0, #+0]
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD0FB             BEQ.N    ??main_10
   \                     ??main_11: (+1)
   \   0000011A   0x....             LDR.N    R0,??DataTable16_10
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0x2801             CMP      R0,#+1
   \   00000120   0xD1A9             BNE.N    ??main_9
   \   00000122   0x....             LDR.N    R0,??DataTable16_11
   \   00000124   0x6800             LDR      R0,[R0, #+0]
   \   00000126   0x2801             CMP      R0,#+1
   \   00000128   0xD186             BNE.N    ??main_1
   \   0000012A   0x2400             MOVS     R4,#+0
   \                     ??main_12: (+1)
   \   0000012C   0x....             LDR.N    R0,??DataTable16_31
   \   0000012E   0x5D00             LDRB     R0,[R0, R4]
   \   00000130   0x2800             CMP      R0,#+0
   \   00000132   0xD062             BEQ.N    ??main_13
   \   00000134   0x....             LDR.N    R0,??DataTable16_31
   \   00000136   0x5D00             LDRB     R0,[R0, R4]
   \   00000138   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000013A   0x.... 0x....      BL       sendDataUART2
   \   0000013E   0x1C64             ADDS     R4,R4,#+1
   \   00000140   0xE7F4             B.N      ??main_12
   \                     ??main_14: (+1)
   \   00000142   0x....             LDR.N    R0,??DataTable16_32
   \   00000144   0x5D00             LDRB     R0,[R0, R4]
   \   00000146   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000148   0x.... 0x....      BL       sendDataUART2
   \   0000014C   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_6: (+1)
   \   0000014E   0x....             LDR.N    R0,??DataTable16_32
   \   00000150   0x5D00             LDRB     R0,[R0, R4]
   \   00000152   0x2800             CMP      R0,#+0
   \   00000154   0xD1F5             BNE.N    ??main_14
   \                     ??main_5: (+1)
   \   00000156   0x....             LDR.N    R0,??DataTable16_12
   \   00000158   0x7800             LDRB     R0,[R0, #+0]
   \   0000015A   0x2800             CMP      R0,#+0
   \   0000015C   0xD14D             BNE.N    ??main_13
   \   0000015E   0x2400             MOVS     R4,#+0
   \                     ??main_15: (+1)
   \   00000160   0x....             LDR.N    R0,??DataTable16_33
   \   00000162   0x5D00             LDRB     R0,[R0, R4]
   \   00000164   0x2800             CMP      R0,#+0
   \   00000166   0xD048             BEQ.N    ??main_13
   \   00000168   0x....             LDR.N    R0,??DataTable16_33
   \   0000016A   0x5D00             LDRB     R0,[R0, R4]
   \   0000016C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000016E   0x.... 0x....      BL       sendDataUART2
   \   00000172   0x1C64             ADDS     R4,R4,#+1
   \   00000174   0xE7F4             B.N      ??main_15
   \                     ??main_4: (+1)
   \   00000176   0x....             LDR.N    R0,??DataTable16_11
   \   00000178   0x6800             LDR      R0,[R0, #+0]
   \   0000017A   0x2804             CMP      R0,#+4
   \   0000017C   0xD11D             BNE.N    ??main_16
   \   0000017E   0x....             LDR.N    R0,??DataTable16_16
   \   00000180   0x6800             LDR      R0,[R0, #+0]
   \   00000182   0x....             LDR.N    R1,??DataTable16_15
   \   00000184   0x8809             LDRH     R1,[R1, #+0]
   \   00000186   0x4288             CMP      R0,R1
   \   00000188   0xDB0B             BLT.N    ??main_17
   \   0000018A   0x2400             MOVS     R4,#+0
   \                     ??main_18: (+1)
   \   0000018C   0x....             LDR.N    R0,??DataTable16_34
   \   0000018E   0x5D00             LDRB     R0,[R0, R4]
   \   00000190   0x2800             CMP      R0,#+0
   \   00000192   0xD032             BEQ.N    ??main_13
   \   00000194   0x....             LDR.N    R0,??DataTable16_34
   \   00000196   0x5D00             LDRB     R0,[R0, R4]
   \   00000198   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000019A   0x.... 0x....      BL       sendDataUART2
   \   0000019E   0x1C64             ADDS     R4,R4,#+1
   \   000001A0   0xE7F4             B.N      ??main_18
   \                     ??main_17: (+1)
   \   000001A2   0x2400             MOVS     R4,#+0
   \                     ??main_19: (+1)
   \   000001A4   0x....             LDR.N    R0,??DataTable16_35
   \   000001A6   0x5D00             LDRB     R0,[R0, R4]
   \   000001A8   0x2800             CMP      R0,#+0
   \   000001AA   0xD026             BEQ.N    ??main_13
   \   000001AC   0x....             LDR.N    R0,??DataTable16_35
   \   000001AE   0x5D00             LDRB     R0,[R0, R4]
   \   000001B0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001B2   0x.... 0x....      BL       sendDataUART2
   \   000001B6   0x1C64             ADDS     R4,R4,#+1
   \   000001B8   0xE7F4             B.N      ??main_19
   \                     ??main_16: (+1)
   \   000001BA   0x....             LDR.N    R0,??DataTable16_11
   \   000001BC   0x6800             LDR      R0,[R0, #+0]
   \   000001BE   0x2805             CMP      R0,#+5
   \   000001C0   0xD10B             BNE.N    ??main_20
   \   000001C2   0x2400             MOVS     R4,#+0
   \                     ??main_21: (+1)
   \   000001C4   0x....             LDR.N    R0,??DataTable16_36
   \   000001C6   0x5D00             LDRB     R0,[R0, R4]
   \   000001C8   0x2800             CMP      R0,#+0
   \   000001CA   0xD016             BEQ.N    ??main_13
   \   000001CC   0x....             LDR.N    R0,??DataTable16_36
   \   000001CE   0x5D00             LDRB     R0,[R0, R4]
   \   000001D0   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001D2   0x.... 0x....      BL       sendDataUART2
   \   000001D6   0x1C64             ADDS     R4,R4,#+1
   \   000001D8   0xE7F4             B.N      ??main_21
   \                     ??main_20: (+1)
   \   000001DA   0x....             LDR.N    R0,??DataTable16_11
   \   000001DC   0x6800             LDR      R0,[R0, #+0]
   \   000001DE   0x2806             CMP      R0,#+6
   \   000001E0   0xD10B             BNE.N    ??main_13
   \   000001E2   0x2400             MOVS     R4,#+0
   \   000001E4   0xE005             B.N      ??main_22
   \                     ??main_23: (+1)
   \   000001E6   0x....             LDR.N    R0,??DataTable16_37
   \   000001E8   0x5D00             LDRB     R0,[R0, R4]
   \   000001EA   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000001EC   0x.... 0x....      BL       sendDataUART2
   \   000001F0   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_22: (+1)
   \   000001F2   0x....             LDR.N    R0,??DataTable16_37
   \   000001F4   0x5D00             LDRB     R0,[R0, R4]
   \   000001F6   0x2800             CMP      R0,#+0
   \   000001F8   0xD1F5             BNE.N    ??main_23
   \                     ??main_13: (+1)
   \   000001FA   0x2000             MOVS     R0,#+0
   \   000001FC   0x....             LDR.N    R1,??DataTable16_11
   \   000001FE   0x6008             STR      R0,[R1, #+0]
   \   00000200   0x....             LDR.N    R0,??DataTable16_22
   \   00000202   0x7800             LDRB     R0,[R0, #+0]
   \   00000204   0x2801             CMP      R0,#+1
   \   00000206   0xD114             BNE.N    ??main_24
   \   00000208   0x....             LDR.N    R0,??DataTable16_23
   \   0000020A   0x7800             LDRB     R0,[R0, #+0]
   \   0000020C   0x2800             CMP      R0,#+0
   \   0000020E   0xD110             BNE.N    ??main_24
   \   00000210   0x....             LDR.N    R0,??DataTable16_21
   \   00000212   0x7800             LDRB     R0,[R0, #+0]
   \   00000214   0x2801             CMP      R0,#+1
   \   00000216   0xD10C             BNE.N    ??main_24
   \   00000218   0x2201             MOVS     R2,#+1
   \   0000021A   0x2164             MOVS     R1,#+100
   \   0000021C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000220   0x.... 0x....      BL       Servo_posimove
   \   00000224   0x2000             MOVS     R0,#+0
   \   00000226   0x....             LDR.N    R1,??DataTable16_21
   \   00000228   0x7008             STRB     R0,[R1, #+0]
   \   0000022A   0x2000             MOVS     R0,#+0
   \   0000022C   0x....             LDR.N    R1,??DataTable16_22
   \   0000022E   0x7008             STRB     R0,[R1, #+0]
   \   00000230   0xE017             B.N      ??main_25
   \                     ??main_24: (+1)
   \   00000232   0x....             LDR.N    R0,??DataTable16_22
   \   00000234   0x7800             LDRB     R0,[R0, #+0]
   \   00000236   0x2800             CMP      R0,#+0
   \   00000238   0xD113             BNE.N    ??main_25
   \   0000023A   0x....             LDR.N    R0,??DataTable16_23
   \   0000023C   0x7800             LDRB     R0,[R0, #+0]
   \   0000023E   0x2801             CMP      R0,#+1
   \   00000240   0xD10F             BNE.N    ??main_25
   \   00000242   0x....             LDR.N    R0,??DataTable16_21
   \   00000244   0x7800             LDRB     R0,[R0, #+0]
   \   00000246   0x2800             CMP      R0,#+0
   \   00000248   0xD10B             BNE.N    ??main_25
   \   0000024A   0x2201             MOVS     R2,#+1
   \   0000024C   0x2164             MOVS     R1,#+100
   \   0000024E   0xF640 0x10C4      MOVW     R0,#+2500
   \   00000252   0x.... 0x....      BL       Servo_negamove
   \   00000256   0x2001             MOVS     R0,#+1
   \   00000258   0x....             LDR.N    R1,??DataTable16_21
   \   0000025A   0x7008             STRB     R0,[R1, #+0]
   \   0000025C   0x2000             MOVS     R0,#+0
   \   0000025E   0x....             LDR.N    R1,??DataTable16_23
   \   00000260   0x7008             STRB     R0,[R1, #+0]
   \                     ??main_25: (+1)
   \   00000262   0x....             LDR.N    R0,??DataTable16_12
   \   00000264   0x7800             LDRB     R0,[R0, #+0]
   \   00000266   0x2801             CMP      R0,#+1
   \   00000268   0xD109             BNE.N    ??main_26
   \   0000026A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000026E   0x9000             STR      R0,[SP, #+0]
   \   00000270   0x2300             MOVS     R3,#+0
   \   00000272   0x....             ADR.N    R2,??DataTable16  ;; " ON"
   \   00000274   0x21F0             MOVS     R1,#+240
   \   00000276   0x2050             MOVS     R0,#+80
   \   00000278   0x.... 0x....      BL       LCD_ShowString
   \   0000027C   0xE008             B.N      ??main_27
   \                     ??main_26: (+1)
   \   0000027E   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000282   0x9000             STR      R0,[SP, #+0]
   \   00000284   0x2300             MOVS     R3,#+0
   \   00000286   0x....             ADR.N    R2,??DataTable16_1  ;; "OFF"
   \   00000288   0x21F0             MOVS     R1,#+240
   \   0000028A   0x2050             MOVS     R0,#+80
   \   0000028C   0x.... 0x....      BL       LCD_ShowString
   \                     ??main_27: (+1)
   \   00000290   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000294   0x9001             STR      R0,[SP, #+4]
   \   00000296   0x2000             MOVS     R0,#+0
   \   00000298   0x9000             STR      R0,[SP, #+0]
   \   0000029A   0x2302             MOVS     R3,#+2
   \   0000029C   0x....             LDR.N    R0,??DataTable16_13
   \   0000029E   0x6802             LDR      R2,[R0, #+0]
   \   000002A0   0x21C8             MOVS     R1,#+200
   \   000002A2   0x2078             MOVS     R0,#+120
   \   000002A4   0x.... 0x....      BL       LCD_ShowNum
   \   000002A8   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000002AC   0x9000             STR      R0,[SP, #+0]
   \   000002AE   0x2300             MOVS     R3,#+0
   \   000002B0   0x....             LDR.N    R2,??DataTable16_38
   \   000002B2   0x2100             MOVS     R1,#+0
   \   000002B4   0x2014             MOVS     R0,#+20
   \   000002B6   0x.... 0x....      BL       LCD_ShowString
   \   000002BA   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000002BE   0x9000             STR      R0,[SP, #+0]
   \   000002C0   0x2300             MOVS     R3,#+0
   \   000002C2   0x....             LDR.N    R2,??DataTable16_39
   \   000002C4   0x2114             MOVS     R1,#+20
   \   000002C6   0x2014             MOVS     R0,#+20
   \   000002C8   0x.... 0x....      BL       LCD_ShowString
   \   000002CC   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000002D0   0x9001             STR      R0,[SP, #+4]
   \   000002D2   0x2000             MOVS     R0,#+0
   \   000002D4   0x9000             STR      R0,[SP, #+0]
   \   000002D6   0x2304             MOVS     R3,#+4
   \   000002D8   0x....             LDR.N    R0,??DataTable16_15
   \   000002DA   0x8802             LDRH     R2,[R0, #+0]
   \   000002DC   0x2104             MOVS     R1,#+4
   \   000002DE   0x2050             MOVS     R0,#+80
   \   000002E0   0x.... 0x....      BL       LCD_ShowNum
   \   000002E4   0xF64F 0x70FF      MOVW     R0,#+65535
   \   000002E8   0x9001             STR      R0,[SP, #+4]
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0x9000             STR      R0,[SP, #+0]
   \   000002EE   0x2304             MOVS     R3,#+4
   \   000002F0   0x....             LDR.N    R0,??DataTable16_18
   \   000002F2   0x8802             LDRH     R2,[R0, #+0]
   \   000002F4   0x2118             MOVS     R1,#+24
   \   000002F6   0x2050             MOVS     R0,#+80
   \   000002F8   0x.... 0x....      BL       LCD_ShowNum
   \   000002FC   0xE70D             B.N      ??main_11
    512              }
    513              return 0;
                     ^
Warning[Pe111]: statement is unreachable
    514          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   0x20 0x4F          DC8      " ON"
   \              0x4E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   0x4F 0x46          DC8      "OFF"
   \              0x46 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   0x40010800         DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   0x40000400         DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   0x40004400         DC32     0x40004400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   0x40012800         DC32     0x40012800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   0x........         DC32     isStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   0x........         DC32     message_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   0x........         DC32     isSpin

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   0x........         DC32     current_time

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   0x........         DC32     enableTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   0x........         DC32     analogData_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   0x........         DC32     SMOKE_FLAG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   0x........         DC32     timer_status

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   0x........         DC32     analogData_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   0x........         DC32     LIGHT_FLAG

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   0x........         DC32     isLed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   0x........         DC32     isClosed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \   00000000   0x........         DC32     isWindowOpening

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \   00000000   0x........         DC32     isWindowClosing

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \   00000000   0x........         DC32     msg2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \   00000000   0x........         DC32     msg1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \   00000000   0x........         DC32     msg3_open

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \   00000000   0x........         DC32     msg3_close

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_34:
   \   00000000   0x........         DC32     msg4_smoke_bad

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_35:
   \   00000000   0x........         DC32     msg4_smoke_good

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_36:
   \   00000000   0x........         DC32     msg5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_37:
   \   00000000   0x........         DC32     msg6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_38:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_39:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x31 0x20          DC8 "1 : START SYSTEM"
   \              0x3A 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x53 0x59    
   \              0x53 0x54    
   \              0x45 0x4D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x32 0x20          DC8 "2 : STOP SYSTEM"
   \              0x3A 0x20    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x20 0x53    
   \              0x59 0x53    
   \              0x54 0x45    
   \              0x4D 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x33 0x20          DC8 "3 : SHOW WINDOW STATUS"
   \              0x3A 0x20    
   \              0x53 0x48    
   \              0x4F 0x57    
   \              0x20 0x57    
   \              0x49 0x4E    
   \              0x44 0x4F    
   \              0x57 0x20    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0x34 0x20          DC8 "4 : SHOW SMOKE VALUE"
   \              0x3A 0x20    
   \              0x53 0x48    
   \              0x4F 0x57    
   \              0x20 0x53    
   \              0x4D 0x4F    
   \              0x4B 0x45    
   \              0x20 0x56    
   \              0x41 0x4C    
   \              0x55 0x45    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x35 0x20          DC8 "5 : OPEN WINDOW"
   \              0x3A 0x20    
   \              0x4F 0x50    
   \              0x45 0x4E    
   \              0x20 0x57    
   \              0x49 0x4E    
   \              0x44 0x4F    
   \              0x57 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x36 0x20          DC8 "6 : CLOSE WINDOW"
   \              0x3A 0x20    
   \              0x43 0x4C    
   \              0x4F 0x53    
   \              0x45 0x20    
   \              0x57 0x49    
   \              0x4E 0x44    
   \              0x4F 0x57    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \   00000000   0x20 0x4F          DC8 " ON"
   \              0x4E 0x00    

   \                                 In section .rodata, align 4
   \   00000000   0x4F 0x46          DC8 "OFF"
   \              0x46 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0x59 0x45          DC8 "YEON1 : "
   \              0x4F 0x4E    
   \              0x31 0x20    
   \              0x3A 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0x4A 0x4F          DC8 "JODO2 : "
   \              0x44 0x4F    
   \              0x32 0x20    
   \              0x3A 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC1_2_IRQHandler
         8   -> ADC_ClearITPendingBit
         8   -> ADC_GetConversionValue
         8   -> ADC_GetITStatus
         8   -> startVen
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_ITConfig
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
       8   GPIO_Configure
         8   -> GPIO_Init
       8   LED_Off
         8   -> GPIO_ResetBits
       8   LED_On
         8   -> GPIO_SetBits
       8   NVIC_Configure
         8   -> NVIC_Init
         8   -> NVIC_PriorityGroupConfig
         8   -> __NVIC_EnableIRQ
       8   RCC_Configure
         8   -> RCC_APB1PeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      16   Servo_negamove
        16   -> TIM_SetCompare1
        16   -> delay_ms
      16   Servo_posimove
        16   -> TIM_SetCompare1
        16   -> delay_ms
       8   TIM2_IRQHandler
         8   -> TIM_ClearITPendingBit
         8   -> TIM_GetITStatus
         8   -> stopMotor
      48   TIM_Configure
        48   -> TIM_ARRPreloadConfig
        48   -> TIM_Cmd
        48   -> TIM_ITConfig
        48   -> TIM_OC1Init
        48   -> TIM_OC1PreloadConfig
        48   -> TIM_TimeBaseInit
       8   USART2_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> USART_ReceiveData
         8   -> startMotor
         8   -> stopMotor
      24   USART2_Init
        24   -> USART_Cmd
        24   -> USART_ITConfig
        24   -> USART_Init
       0   __NVIC_EnableIRQ
      32   delay_ms
        32   -> RCC_GetClocksFreq
      16   main
        16   -> ADC_Configure
        16   -> GPIO_Configure
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> LCD_Clear
        16   -> LCD_Init
        16   -> LCD_ShowNum
        16   -> LCD_ShowString
        16   -> NVIC_Configure
        16   -> RCC_Configure
        16   -> Servo_negamove
        16   -> Servo_posimove
        16   -> SystemInit
        16   -> TIM_Configure
        16   -> USART2_Init
        16   -> sendDataUART2
        16   -> stopMotor
       8   sendDataUART2
         8   -> USART_SendData
       8   startMotor
         8   -> GPIO_ResetBits
         8   -> LED_On
       8   startVen
         8   -> LED_On
         8   -> startMotor
       8   stopMotor
         8   -> GPIO_SetBits
         8   -> LED_Off


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable16_10
       4  ??DataTable16_11
       4  ??DataTable16_12
       4  ??DataTable16_13
       4  ??DataTable16_14
       4  ??DataTable16_15
       4  ??DataTable16_16
       4  ??DataTable16_17
       4  ??DataTable16_18
       4  ??DataTable16_19
       4  ??DataTable16_2
       4  ??DataTable16_20
       4  ??DataTable16_21
       4  ??DataTable16_22
       4  ??DataTable16_23
       4  ??DataTable16_24
       4  ??DataTable16_25
       4  ??DataTable16_26
       4  ??DataTable16_27
       4  ??DataTable16_28
       4  ??DataTable16_29
       4  ??DataTable16_3
       4  ??DataTable16_30
       4  ??DataTable16_31
       4  ??DataTable16_32
       4  ??DataTable16_33
       4  ??DataTable16_34
       4  ??DataTable16_35
       4  ??DataTable16_36
       4  ??DataTable16_37
       4  ??DataTable16_38
       4  ??DataTable16_39
       4  ??DataTable16_4
       4  ??DataTable16_5
       4  ??DataTable16_6
       4  ??DataTable16_7
       4  ??DataTable16_8
       4  ??DataTable16_9
      20  ?_0
      16  ?_1
      24  ?_2
      24  ?_3
      16  ?_4
      20  ?_5
       4  ?_6
       4  ?_7
      12  ?_8
      12  ?_9
     168  ADC1_2_IRQHandler
     236  ADC_Configure
     162  GPIO_Configure
      24  LED_Off
      24  LED_On
       4  LIGHT_FLAG
     138  NVIC_Configure
      90  RCC_Configure
       4  SMOKE_FLAG
      58  Servo_negamove
      58  Servo_posimove
     120  TIM2_IRQHandler
     170  TIM_Configure
     222  USART2_IRQHandler
      76  USART2_Init
      30  __NVIC_EnableIRQ
       2  analogData_1
       2  analogData_2
      48  color
       2  curDeg
       4  current_time
      46  delay_ms
       1  enableTimer
       1  isClosed
       1  isLed
       1  isSpin
       1  isStart
       1  isWindowClosing
       1  isWindowOpening
     766  main
       2  maxDeg
       4  message_index
       2  minDeg
      16  msg1
      16  msg2
      20  msg3_close
      20  msg3_open
      44  msg4_smoke_bad
      28  msg4_smoke_good
      24  msg5
      20  msg6
      26  sendDataUART2
      64  startMotor
      36  startVen
      56  stopMotor
       4  timer_status

 
    22 bytes in section .bss
   251 bytes in section .data
   152 bytes in section .rodata
 2 730 bytes in section .text
 
 2 730 bytes of CODE  memory
   152 bytes of CONST memory
   273 bytes of DATA  memory

Errors: none
Warnings: 3
