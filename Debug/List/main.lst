###############################################################################
#
# IAR ANSI C/C++ Compiler V8.22.1.15669/W32 for ARM       23/Nov/2023  19:24:28
# Copyright 1999-2018 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\pnu1\Documents\project_test_w3_G1\user\main.c
#    Command line =  
#        -f C:\Users\pnu1\AppData\Local\Temp\EWFCE6.tmp
#        (C:\Users\pnu1\Documents\project_test_w3_G1\user\main.c -D
#        USE_STDPERIPH_DRIVER -D STM32F10X_CL -lC
#        C:\Users\pnu1\Documents\project_test_w3_G1\Debug\List -o
#        C:\Users\pnu1\Documents\project_test_w3_G1\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\Users\pnu1\Documents\project_test_w3_G1\libraries\CMSIS\DeviceSupport\
#        -I
#        C:\Users\pnu1\Documents\project_test_w3_G1\libraries\CMSIS\DeviceSupport\Startup\
#        -I
#        C:\Users\pnu1\Documents\project_test_w3_G1\libraries\STM32F10x_StdPeriph_Driver_v3.5\inc\
#        -I
#        C:\Users\pnu1\Documents\project_test_w3_G1\libraries\STM32F10x_StdPeriph_Driver_v3.5\src\
#        -I C:\Users\pnu1\Documents\project_test_w3_G1\libraries\LCD\ -I
#        C:\Users\pnu1\Documents\project_test_w3_G1\user\ -I
#        C:\Users\pnu1\Documents\project_test_w3_G1\user\inc\ -Ol -I
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.0\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =  
#        C:\Users\pnu1\Documents\project_test_w3_G1\Debug\List\main.lst
#    Object file  =  
#        C:\Users\pnu1\Documents\project_test_w3_G1\Debug\Obj\main.o
#
###############################################################################

C:\Users\pnu1\Documents\project_test_w3_G1\user\main.c
      1          #include "stm32f10x_adc.h"
      2          #include "stm32f10x_rcc.h"
      3          #include "stm32f10x_gpio.h"
      4          #include "stm32f10x_usart.h"
      5          #include "misc.h"
      6          #include "lcd.h"
      7          #include "touch.h"
      8          
      9          #define LUX_THRESHOLD 3500
     10          
     11          //void Init(void);
     12          void RCC_Configure(void);
     13          void GPIO_Configure(void);
     14          void ADC_Configure(void);
     15          void DMA_Configure(void);
     16          

   \                                 In section .rodata, align 4
     17          const int color[12] = {WHITE,CYAN,BLUE,RED,MAGENTA,LGRAY,GREEN,YELLOW,BROWN,BRRED,GRAY};
   \                     color:
   \   00000000   0x0000FFFF         DC32 65535, 32767, 31, 63488, 63519, 50712, 2016, 65504, 48192, 64519
   \              0x00007FFF   
   \              0x0000001F   
   \              0x0000F800   
   \              0x0000F81F   
   \              0x0000C618   
   \              0x000007E0   
   \              0x0000FFE0   
   \              0x0000BC40   
   \              0x0000FC07   
   \   00000028   0x00008430         DC32 33840
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
     18          
     19          // volatile unsigned 32bits

   \                                 In section .bss, align 4
     20          volatile uint32_t ADC_Value[1]; // ADC @@@ ?€?@@ @@@????@ @@@?@@@?volatile ?@@?@? ?@@???@@ 
   \                     ADC_Value:
   \   00000000                      DS8 4
     21          
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void RCC_Configure(void) {
   \                     RCC_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     24              // DMA1, ADC1, Port C??CLOCK ?@?
     25              RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       RCC_AHBPeriphClockCmd
     26              RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0xF44F 0x7000      MOV      R0,#+512
   \   00000010   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     27              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
   \   00000014   0x2101             MOVS     R1,#+1
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
     28          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void GPIO_Configure(void) {
   \                     GPIO_Configure: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     31              // PC2 (@@@ ?@@) Configuration
     32              GPIO_InitTypeDef GPIO_InitStructure;
     33              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     34              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0003      STRB     R0,[SP, #+3]
     35              GPIO_Init(GPIOC, &GPIO_InitStructure);
   \   0000000E   0x4669             MOV      R1,SP
   \   00000010   0x....             LDR.N    R0,??DataTable4  ;; 0x40011000
   \   00000012   0x.... 0x....      BL       GPIO_Init
     36          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void ADC_Configure(void) {
   \                     ADC_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     39              ADC_InitTypeDef ADC_InitStructure;
     40              
     41              // ADC1 ?@@
     42              ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
     43              ADC_InitStructure.ADC_ScanConvMode = DISABLE;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF88D 0x0004      STRB     R0,[SP, #+4]
     44              ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xF88D 0x0005      STRB     R0,[SP, #+5]
     45              ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
   \   00000014   0xF45F 0x2060      MOVS     R0,#+917504
   \   00000018   0x9002             STR      R0,[SP, #+8]
     46              ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x9003             STR      R0,[SP, #+12]
     47              ADC_InitStructure.ADC_NbrOfChannel = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xF88D 0x0010      STRB     R0,[SP, #+16]
     48              ADC_Init(ADC1, &ADC_InitStructure);
   \   00000024   0x4669             MOV      R1,SP
   \   00000026   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000028   0x.... 0x....      BL       ADC_Init
     49          
     50              // reference : week10_source_code
     51              ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 1, ADC_SampleTime_239Cycles5);
   \   0000002C   0x2307             MOVS     R3,#+7
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x210C             MOVS     R1,#+12
   \   00000032   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000034   0x.... 0x....      BL       ADC_RegularChannelConfig
     52              // ADC_ITConfig(ADC1,ADC_IT_EOC, ENABLE); // No Interrupt
     53              ADC_DMACmd(ADC1, ENABLE); // interrupt@€ ?@@ DMA ?@@ -> ADC-DMACmd ?@@
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000003C   0x.... 0x....      BL       ADC_DMACmd
     54              ADC_Cmd(ADC1, ENABLE);
   \   00000040   0x2101             MOVS     R1,#+1
   \   00000042   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000044   0x.... 0x....      BL       ADC_Cmd
     55              ADC_ResetCalibration(ADC1);
   \   00000048   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000004A   0x.... 0x....      BL       ADC_ResetCalibration
     56              while(ADC_GetResetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_0: (+1)
   \   0000004E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000050   0x.... 0x....      BL       ADC_GetResetCalibrationStatus
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD1FA             BNE.N    ??ADC_Configure_0
     57              ADC_StartCalibration(ADC1);
   \   00000058   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000005A   0x.... 0x....      BL       ADC_StartCalibration
     58              while(ADC_GetCalibrationStatus(ADC1));
   \                     ??ADC_Configure_1: (+1)
   \   0000005E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   00000060   0x.... 0x....      BL       ADC_GetCalibrationStatus
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD1FA             BNE.N    ??ADC_Configure_1
     59              ADC_SoftwareStartConvCmd(ADC1, ENABLE);
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x....             LDR.N    R0,??DataTable4_1  ;; 0x40012400
   \   0000006C   0x.... 0x....      BL       ADC_SoftwareStartConvCmd
     60          }
   \   00000070   0xB005             ADD      SP,SP,#+20
   \   00000072   0xBD00             POP      {PC}             ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void DMA_Configure(void) {
   \                     DMA_Configure: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
     63          	DMA_InitTypeDef DMA_Instructure; // DMA ?@@???@@ @@@@
     64          
     65          	DMA_Instructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;    			// ?@@???@@ @?@€?@@@€(ADC->DR = conversion???@@??@@@ ?@@@?
   \   00000004   0x....             LDR.N    R0,??DataTable4_2  ;; 0x4001244c
   \   00000006   0x9000             STR      R0,[SP, #+0]
     66          	DMA_Instructure.DMA_MemoryBaseAddr = (uint32_t)&ADC_Value[0];				// @€?@@ @??@@???@?
   \   00000008   0x....             LDR.N    R0,??DataTable4_3
   \   0000000A   0x9001             STR      R0,[SP, #+4]
     67          	DMA_Instructure.DMA_DIR = DMA_DIR_PeripheralSRC;					// @@? ?@@?@@ ?@@?@? ?@@?????@@@?DIR_PeripheralSRC ?@@
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9002             STR      R0,[SP, #+8]
     68          	DMA_Instructure.DMA_BufferSize = 1;							// ADC @€?@@ 1@@@ ?@@?@@ ?@@??@@@ ?@@ 1@??@@
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x9003             STR      R0,[SP, #+12]
     69          	DMA_Instructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;				// @@? ?@@@€ 1@??@?@?PeripheralInc Disable
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9004             STR      R0,[SP, #+16]
     70          	DMA_Instructure.DMA_MemoryInc = DMA_MemoryInc_Disable;					// ??@@@@?@@@ ?@@?@@ @@@ @@@@€@? @@@@?@@@ ?@??@@ @@@ @@??@@ ?@@ ?@@ -> Disable
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9005             STR      R0,[SP, #+20]
     71          	DMA_Instructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;		        // ?@@???@@??word ?@@@??@@
   \   0000001C   0xF44F 0x7000      MOV      R0,#+512
   \   00000020   0x9006             STR      R0,[SP, #+24]
     72          	DMA_Instructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;				// @@@@??@@???@@??word ?@@@??@@
   \   00000022   0xF44F 0x6000      MOV      R0,#+2048
   \   00000026   0x9007             STR      R0,[SP, #+28]
     73          	DMA_Instructure.DMA_Mode = DMA_Mode_Circular;						// ?@@ @@@ @@@?@@ ?@@???@?@?Circular Mode
   \   00000028   0x2020             MOVS     R0,#+32
   \   0000002A   0x9008             STR      R0,[SP, #+32]
     74          	DMA_Instructure.DMA_Priority = DMA_Priority_High;					// ?@@ ?@@??Interrupt @@@???@@ Veryhigh@??@@
   \   0000002C   0xF44F 0x5000      MOV      R0,#+8192
   \   00000030   0x9009             STR      R0,[SP, #+36]
     75          	DMA_Instructure.DMA_M2M = DMA_M2M_Disable;						// ?@@?@? ?@@@€@?Disable
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x900A             STR      R0,[SP, #+40]
     76          
     77          	DMA_Init(DMA1_Channel1, &DMA_Instructure);						// @@@?
   \   00000036   0x4669             MOV      R1,SP
   \   00000038   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40020008
   \   0000003A   0x.... 0x....      BL       DMA_Init
     78          	DMA_Cmd(DMA1_Channel1, ENABLE);								// ?@@?
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x....             LDR.N    R0,??DataTable4_4  ;; 0x40020008
   \   00000042   0x.... 0x....      BL       DMA_Cmd
     79          }
   \   00000046   0xB00B             ADD      SP,SP,#+44
   \   00000048   0xBD00             POP      {PC}             ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          int main(){
   \                     main: (+1)
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
     82              SystemInit();
   \   00000002   0x.... 0x....      BL       SystemInit
     83              RCC_Configure();
   \   00000006   0x.... 0x....      BL       RCC_Configure
     84              GPIO_Configure();
   \   0000000A   0x.... 0x....      BL       GPIO_Configure
     85              ADC_Configure();
   \   0000000E   0x.... 0x....      BL       ADC_Configure
     86              DMA_Configure();
   \   00000012   0x.... 0x....      BL       DMA_Configure
     87              // LCD Initialize
     88              LCD_Init();
   \   00000016   0x.... 0x....      BL       LCD_Init
     89              Touch_Configuration();
   \   0000001A   0x.... 0x....      BL       Touch_Configuration
     90              Touch_Adjust();
   \   0000001E   0x.... 0x....      BL       Touch_Adjust
     91              LCD_Clear(WHITE);	
   \   00000022   0xF64F 0x70FF      MOVW     R0,#+65535
   \   00000026   0x.... 0x....      BL       LCD_Clear
     92              LCD_ShowString(80,80,"THUR_Team01", BLACK, WHITE); // Print Team
   \   0000002A   0xF64F 0x70FF      MOVW     R0,#+65535
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x2300             MOVS     R3,#+0
   \   00000032   0x....             LDR.N    R2,??DataTable4_5
   \   00000034   0x2150             MOVS     R1,#+80
   \   00000036   0x2050             MOVS     R0,#+80
   \   00000038   0x.... 0x....      BL       LCD_ShowString
     93          
     94              uint8_t light = 0;		// ?@@ ?@@ ?@@
   \   0000003C   0x2000             MOVS     R0,#+0
     95              uint8_t before_light = 2;   // ?@@ ?@@ ?@@
   \   0000003E   0x2002             MOVS     R0,#+2
     96              int back_color = WHITE; 	// @@@ ?@@
   \   00000040   0xF64F 0x71FF      MOVW     R1,#+65535
   \   00000044   0xE01A             B.N      ??main_0
     97              
     98              while(1){
     99          		
    100                  light = ADC_Value[0] < LUX_THRESHOLD; // Threshold @@@??ADC @@@ ?@@@?=@@@???? 1 @??€?
    101          		
    102                  if (before_light != light){	      // ?@@???@@ ?@@?€ @€@??@@ ?@@@€ ?@@?@@(=@?@€@@@ @@??@@)
    103          		  // @@@@??@@ @@@, ?@@?@@ ??@@@
    104          		  if(light) back_color = YELLOW;
    105          		  else 	    back_color = WHITE;
   \                     ??main_1: (+1)
   \   00000046   0xF64F 0x75FF      MOVW     R5,#+65535
    106          
    107                    LCD_Clear(back_color); 
   \                     ??main_2: (+1)
   \   0000004A   0x0028             MOVS     R0,R5
   \   0000004C   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000004E   0x.... 0x....      BL       LCD_Clear
    108                    LCD_ShowString(80,80,"THUR_Team01", BLACK, back_color); // Print Team
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x....             LDR.N    R2,??DataTable4_5
   \   0000005C   0x2150             MOVS     R1,#+80
   \   0000005E   0x2050             MOVS     R0,#+80
   \   00000060   0x.... 0x....      BL       LCD_ShowString
    109                    LCD_ShowNum(80,100, ADC_Value[0], 4, BLACK, back_color); // @@@ ?@@ @?@@@
   \   00000064   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   0x9501             STR      R5,[SP, #+4]
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0x2304             MOVS     R3,#+4
   \   0000006E   0x....             LDR.N    R0,??DataTable4_3
   \   00000070   0x6802             LDR      R2,[R0, #+0]
   \   00000072   0x2164             MOVS     R1,#+100
   \   00000074   0x2050             MOVS     R0,#+80
   \   00000076   0x.... 0x....      BL       LCD_ShowNum
    110          
    111                    before_light = light; // ?@@ ?@@ ?@@ <- ?@@ ?@@ ?@@
   \   0000007A   0x0020             MOVS     R0,R4
   \                     ??main_0: (+1)
   \   0000007C   0x....             LDR.N    R1,??DataTable4_3
   \   0000007E   0x6809             LDR      R1,[R1, #+0]
   \   00000080   0xF640 0x52AC      MOVW     R2,#+3500
   \   00000084   0x4291             CMP      R1,R2
   \   00000086   0xD201             BCS.N    ??main_3
   \   00000088   0x2401             MOVS     R4,#+1
   \   0000008A   0xE000             B.N      ??main_4
   \                     ??main_3: (+1)
   \   0000008C   0x2400             MOVS     R4,#+0
   \                     ??main_4: (+1)
   \   0000008E   0x0001             MOVS     R1,R0
   \   00000090   0x0022             MOVS     R2,R4
   \   00000092   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000094   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000096   0x4291             CMP      R1,R2
   \   00000098   0xD0F0             BEQ.N    ??main_0
   \   0000009A   0x0020             MOVS     R0,R4
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD0D1             BEQ.N    ??main_1
   \   000000A2   0xF64F 0x75E0      MOVW     R5,#+65504
   \   000000A6   0xE7D0             B.N      ??main_2
    112                  }
    113                }
    114          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40011000         DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40012400         DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x4001244C         DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     ADC_Value

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x54 0x48          DC8 "THUR_Team01"
   \              0x55 0x52    
   \              0x5F 0x54    
   \              0x65 0x61    
   \              0x6D 0x30    
   \              0x31 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ADC_Configure
        24   -> ADC_Cmd
        24   -> ADC_DMACmd
        24   -> ADC_GetCalibrationStatus
        24   -> ADC_GetResetCalibrationStatus
        24   -> ADC_Init
        24   -> ADC_RegularChannelConfig
        24   -> ADC_ResetCalibration
        24   -> ADC_SoftwareStartConvCmd
        24   -> ADC_StartCalibration
      48   DMA_Configure
        48   -> DMA_Cmd
        48   -> DMA_Init
       8   GPIO_Configure
         8   -> GPIO_Init
       8   RCC_Configure
         8   -> RCC_AHBPeriphClockCmd
         8   -> RCC_APB2PeriphClockCmd
      24   main
        24   -> ADC_Configure
        24   -> DMA_Configure
        24   -> GPIO_Configure
        24   -> LCD_Clear
        24   -> LCD_Init
        24   -> LCD_ShowNum
        24   -> LCD_ShowString
        24   -> RCC_Configure
        24   -> SystemInit
        24   -> Touch_Adjust
        24   -> Touch_Configuration


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
      12  ?_0
     116  ADC_Configure
       4  ADC_Value
      74  DMA_Configure
      24  GPIO_Configure
      30  RCC_Configure
      48  color
     168  main

 
   4 bytes in section .bss
  60 bytes in section .rodata
 436 bytes in section .text
 
 436 bytes of CODE  memory
  60 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
